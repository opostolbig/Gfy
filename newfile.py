import time
import os
import json
import random
from datetime import datetime, timedelta
from telethon.errors import FloodWaitError
from telethon import TelegramClient, events, types
from telethon.tl import functions
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputReportReasonSpam  # –£–¥–∞–ª–∏–ª–∏ –∏–º–ø–æ—Ä—Ç—ã InlineKeyboardButton –∏ InlineKeyboardMarkup
from colorama import Fore, Style

api_id = 25055016
api_hash = '25edf5b7becebe91a2d61fe8d9d9931b'
bot_token = '7642861396:AAHKFGfwLyq3TG96HjCRjWmqHOyJr0gO0Ig'
subs_file = "sub/sub.txt"
image_path = "image/image.jpg"
usage_limits = {}
sessions_path = "sessions"
admin_ids = [7070612847, 1730733360, 7310051494,721151979]
bot = TelegramClient("bot", api_id, api_hash).start(bot_token=bot_token)

if not os.path.exists(subs_file):
    os.makedirs(os.path.dirname(subs_file), exist_ok=True)
    with open(subs_file, "w") as f:
        f.write("{}")

reptexts = ['Good afternoon dear Telegram support! I would like to complain about this message for violating the Telegram (ToS) rules, please take action!',
            'Dear, Telegram support! I would like to tell you that this message contains threats and violates the rules of Telegram messenger. Please, take action.']

try:
    with open(subs_file, "r") as f:
        subscriptions = json.load(f)
except json.JSONDecodeError:
    subscriptions = {}
    with open(subs_file, "w") as f:
        json.dump(subscriptions, f)

def save_subscriptions():
    with open(subs_file, "w") as f:
        json.dump(subscriptions, f)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
def has_active_subscription(user_id):
    if str(user_id) in subscriptions:
        expiry = datetime.fromisoformat(subscriptions[str(user_id)])
        if expiry > datetime.now():
            return expiry
        else:
            del subscriptions[str(user_id)]
            save_subscriptions()
    return None

@bot.on(events.NewMessage(pattern='/start'))
async def start(event):
    user_id = event.sender_id
    expiry = has_active_subscription(user_id)
    if expiry:
        text1 = f'–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expiry.strftime("%H:%M %d.%m.%Y")}'
    else:
        text1 = '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if os.path.exists(image_path):
        await bot.send_message(
            user_id,
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GLONET Botnet.\n\n–í–≤–µ–¥–∏—Ç–µ /ss –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n{text1}',
            parse_mode='html',
            file=image_path
        )
    else:
        await bot.send_message(
            user_id,
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GLONET Botnet.\n\n–í–≤–µ–¥–∏—Ç–µ /ss –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n{text1}',
            parse_mode='html'
        )

@bot.on(events.NewMessage(pattern="/ss (.+)"))
async def report_message(event):
    user_id = event.sender_id
    expiry = has_active_subscription(user_id)
    if not expiry:
        await event.reply('–£ –≤–∞—Å –Ω–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.')
        return
    target = event.message.text.split(maxsplit=1)[1]
    await event.reply("–ñ–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è...")
    start_time = datetime.now()
    link_parts = target.split('/')
    chat_username = link_parts[-2]
    message_id = int(link_parts[-1])

    successful_reports = 0
    unsuccessful_reports = 0
    now = datetime.now()
    if user_id not in admin_ids:
        if user_id in usage_limits and now < usage_limits[user_id]:
            remaining = (usage_limits[user_id] - now).total_seconds() / 60
            await event.reply(f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ {remaining:.1f} –º–∏–Ω—É—Ç.")
            return
        usage_limits[user_id] = now + timedelta(minutes=7)
    for session_file in os.listdir(sessions_path):
            session_path = os.path.join(sessions_path, session_file)
            client = TelegramClient(session_path, api_id, api_hash)
            delaytext = random.uniform(0.01, 0.02)
            messagetext = random.choice(reptexts)
            try:
                time.sleep(delaytext)
                await client.connect()
                chat = await client.get_entity(chat_username)
                await client(ReportRequest(
                                peer=chat,
                                id=[message_id],
                                reason=InputReportReasonSpam(),
                                message=messagetext
                            ))
                successful_reports += 1
                print(f"–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {session_file}, {target}, {datetime.now()}, {messagetext}")
            except Exception as e:
                unsuccessful_reports += 1
                print(f"–û–®–ò–ë–ö–ê: {session_file}: {e}")
            finally:
                await client.disconnect()
    await event.reply(
            f"–ñ–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]({target})\n\n"
            f"–£—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±: {successful_reports}\n"
            f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –∂–∞–ª–æ–±: {unsuccessful_reports}\n\n"
            )

@bot.on(events.NewMessage(pattern="/add", from_users=admin_ids))
async def add_sessions(event):
    print("–ö–æ–º–∞–Ω–¥–∞ /add –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", event.sender_id)
    if event.message.file:
        try:
            file_path = os.path.join(sessions_path, event.message.file.name)
            await event.message.download_media(file=file_path)
            if os.path.exists(file_path):
                await event.reply(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–π.")
                print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
            else:
                await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
                print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")
        except Exception as e:
            await event.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        print("–§–∞–π–ª –Ω–µ –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∫–æ–º–∞–Ω–¥–µ /add.")

@bot.on(events.NewMessage(pattern="/give (\\d+) (\\d+)", from_users=admin_ids))
async def give_subscription(event):
    try:
        args = event.message.text.split()
        user_id = int(args[1])
        days = int(args[2])

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        expiry = datetime.now() + timedelta(days=days)

        subscriptions[str(user_id)] = expiry.isoformat()
        save_subscriptions()
        await event.reply(f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤—ã–¥–∞–Ω–∞ –Ω–∞ {days} –¥–Ω—è(–µ–π), –¥–æ {expiry.strftime('%H:%M %d.%m.%Y')}.")

    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.on(events.NewMessage(pattern="/remove_sub (\\d+)", from_users=admin_ids))
async def remove_subscription(event):
    try:
        user_id = int(event.message.text.split()[1])
        if str(user_id) in subscriptions:
            del subscriptions[str(user_id)]
            save_subscriptions()
            await event.reply(f"üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await event.reply("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

bot.run_until_disconnected()
